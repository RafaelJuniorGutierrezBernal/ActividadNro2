import re
import unicodedata
from datetime import datetime

class Biblioteca:
    def __init__(self):
        self.libros = []
        self.usuarios = []
        self.prestamos = []

    def normalizar_texto(self, texto):
        """Convierte el texto a min√∫sculas y elimina tildes para b√∫squedas."""
        texto = texto.lower()
        return ''.join(c for c in unicodedata.normalize('NFD', texto) if unicodedata.category(c) != 'Mn')

    def agregar_libro(self, libro):
        if not libro.titulo.strip() or len(libro.titulo) < 2:
            print("‚ùå Error: El t√≠tulo del libro no puede estar vac√≠o o tener un solo car√°cter.")
            return False
        if not libro.autor.strip() or len(libro.autor) < 2:
            print("‚ùå Error: El autor del libro no puede estar vac√≠o o tener un solo car√°cter.")
            return False
        if not libro.isbn.strip():
            print("‚ùå Error: El ISBN no puede estar vac√≠o.")
            return False
        
        # Validar formato de ISBN
        if not self.validar_isbn(libro.isbn):
            return False
            
        # Verificar si ya existe un libro con el mismo ISBN
        if any(l.isbn == libro.isbn for l in self.libros):
            print(f"‚ùå Error: Ya existe un libro con el ISBN {libro.isbn}.")
            return False

        # Guardamos la versi√≥n normalizada para b√∫squeda
        libro.titulo_normalizado = self.normalizar_texto(libro.titulo)
        libro.autor_normalizado = self.normalizar_texto(libro.autor)

        self.libros.append(libro)
        print(f"‚úÖ Libro '{libro.titulo}' agregado correctamente.")
        return True
        
    def validar_isbn(self, isbn):
        """Valida que el ISBN tenga un formato correcto (10 o 13 d√≠gitos)."""
        isbn = isbn.replace("-", "").replace(" ", "")  # Eliminar guiones y espacios
        
        if not isbn.isdigit():
            print("‚ùå Error: El ISBN debe contener solo d√≠gitos (se permiten guiones y espacios).")
            return False
            
        if len(isbn) != 10 and len(isbn) != 13:
            print("‚ùå Error: El ISBN debe tener 10 o 13 d√≠gitos.")
            return False
            
        return True

    def registrar_usuario(self, usuario):
        try:
            if not usuario.nombre.strip() or len(usuario.nombre) < 2:
                print("‚ùå Error: El nombre no puede estar vac√≠o o tener un solo car√°cter.")
                return False
                
            # Validar tel√©fono y correo
            if not self.validar_telefono(usuario.telefono):
                return False
                
            if not self.validar_correo(usuario.correoU):
                return False
            
            # Verificaci√≥n con versi√≥n normalizada del correo
            correo_normalizado = usuario.correoU.lower()
            if any(u.correoU.lower() == correo_normalizado for u in self.usuarios):
                print("‚ùå Error: Este correo ya est√° registrado.")
                return False

            # Guardamos la versi√≥n normalizada para b√∫squedas futuras
            usuario.nombre_normalizado = self.normalizar_texto(usuario.nombre)

            self.usuarios.append(usuario)
            print(f"‚úÖ Usuario '{usuario.nombre}' registrado correctamente.")
            return True
        except ValueError as e:
            print(f"‚ùå Error al registrar usuario: {e}")
            return False

    def mostrar_libros_disponibles(self):
        libros_disponibles = [libro for libro in self.libros if libro.disponibilidad()]
        if not libros_disponibles:
            print("üìö No hay libros disponibles en la biblioteca.")
        else:
            print("üìö Libros disponibles:")
            for i, libro in enumerate(libros_disponibles, 1):
                print(f"{i}. {libro}")

    def mostrar_usuarios(self):
        if not self.usuarios:
            print("üë§ No hay usuarios registrados.")
        else:
            print("üë§ Usuarios registrados:")
            for i, usuario in enumerate(self.usuarios, 1):
                print(f"{i}. {usuario}")
                
    def prestar_libro(self, usuario, libro):
        # Validar que el usuario exista en el sistema
        if usuario not in self.usuarios:
            print("‚ùå Error: El usuario no est√° registrado en la biblioteca.")
            return False

        # Validar que el libro exista en el sistema
        if libro not in self.libros:
            print("‚ùå Error: El libro no est√° disponible en la biblioteca.")
            return False

        # Validar expl√≠citamente la disponibilidad del libro
        if not libro.disponible:
            print("‚ùå Error: El libro ya est√° prestado.")
            return False
            
        # Validar l√≠mite de pr√©stamos por usuario (m√°ximo 3 libros)
        if len(usuario.libros_prestados) >= 3:
            print(f"‚ùå Error: {usuario.nombre} ya tiene el m√°ximo de 3 libros prestados.")
            return False

        from models.Prestamo import Prestamo  # Importaci√≥n dentro del m√©todo para evitar circular imports
        prestamo = Prestamo(usuario, libro)
        
        libro.disponible = False
        usuario.libros_prestados.append(libro)
        self.prestamos.append(prestamo)
        
        print(f"üìñ '{libro.titulo}' ha sido prestado a {usuario.nombre}.")
        return True
            
    def devolver_libro(self, usuario, libro):
        # Buscar el pr√©stamo activo
        prestamo = next((p for p in self.prestamos if p.usuario == usuario and p.libro == libro and p.estado == "Prestado"), None)
        
        if not prestamo:
            print("‚ùå Error: Este libro no est√° registrado como prestado por este usuario.")
            return False
        
        # Validar que el libro est√© en la lista de pr√©stamos del usuario
        if libro not in usuario.libros_prestados:
            print("‚ùå Error: Inconsistencia en el sistema. Contacte al administrador.")
            return False

        libro.disponible = True
        usuario.libros_prestados.remove(libro)
        
        prestamo.fecha_devolucion = datetime.now()
        prestamo.estado = "Devuelto"
        
        print(f"‚úÖ '{libro.titulo}' ha sido devuelto por {usuario.nombre}.")
        return True
        
    def validar_telefono(self, telefono):
        """Verifica que el n√∫mero de tel√©fono solo contenga d√≠gitos y tenga entre 7 y 15 caracteres."""
        # Eliminar espacios y guiones para la validaci√≥n
        telefono_limpio = telefono.replace(" ", "").replace("-", "")
        
        if telefono_limpio.isdigit() and 7 <= len(telefono_limpio) <= 15:
            return True
        print("‚ùå Error: El n√∫mero de tel√©fono debe contener solo d√≠gitos y tener entre 7 y 15 caracteres.")
        return False

    def validar_correo(self, correo):
        """Verifica que el correo tenga un formato v√°lido."""
        if not correo or not correo.strip():
            print("‚ùå Error: El correo electr√≥nico no puede estar vac√≠o.")
            return False
            
        patron_correo = r"^[\w\.-]+@[\w\.-]+\.\w+$"
        if re.match(patron_correo, correo):
            return True
        print("‚ùå Error: El correo electr√≥nico no es v√°lido.")
        return False
    
    def buscar_usuario(self, criterio, valor):
        """Busca un usuario por nombre, correo o tel√©fono."""
        valor_normalizado = self.normalizar_texto(valor) if criterio == "nombre" else valor.lower()
        
        if criterio == "nombre":
            return next((u for u in self.usuarios if self.normalizar_texto(u.nombre).find(valor_normalizado) != -1), None)
        elif criterio == "correo":
            return next((u for u in self.usuarios if u.correoU.lower() == valor_normalizado), None)
        elif criterio == "telefono":
            telefono_limpio = valor.replace(" ", "").replace("-", "")
            return next((u for u in self.usuarios if u.telefono.replace(" ", "").replace("-", "") == telefono_limpio), None)
        return None
        
    def mostrar_menu(self):
        from models.Libro import Libro
        from models.Usuario import Usuario

        while True:
            print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            print("‚ïë üìö  BIBLIOTECA VIRTUAL   ‚ïë")
            print("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
            print("‚ïë 1Ô∏è‚É£ Registrar usuario    ‚ïë")
            print("‚ïë 2Ô∏è‚É£ Agregar libro        ‚ïë")
            print("‚ïë 3Ô∏è‚É£ Consultar libros     ‚ïë")

            if len(self.usuarios) > 0 and len(self.libros) > 0:
                print("‚ïë 4Ô∏è‚É£ Prestar libro        ‚ïë")

            if len(self.prestamos) > 0:
                print("‚ïë 5Ô∏è‚É£ Devolver libro       ‚ïë")

            print("‚ïë 6Ô∏è‚É£ Mostrar usuarios     ‚ïë")
            print("‚ïë 0Ô∏è‚É£ Salir                ‚ïë")
            print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

            opcion = input("Seleccione una opci√≥n: ")

            if opcion == "1":
                nombre = input("Ingrese nombre del usuario: ").strip()
                if not nombre:
                    print("‚ùå Error: El nombre no puede estar vac√≠o.")
                    continue
                    
                telefono = input("Ingrese n√∫mero de tel√©fono: ").strip()
                correo = input("Ingrese correo electr√≥nico: ").strip()

                if self.validar_telefono(telefono) and self.validar_correo(correo):
                    try:
                        usuario = Usuario(nombre, telefono, correo)
                        self.registrar_usuario(usuario)
                    except ValueError as e:
                        print(f"Error: {e}")
                else:
                    print("‚ùå Registro cancelado debido a datos inv√°lidos.")

            elif opcion == "2":
                titulo = input("Ingrese el t√≠tulo del libro: ").strip()
                if not titulo:
                    print("‚ùå Error: El t√≠tulo no puede estar vac√≠o.")
                    continue
                    
                autor = input("Ingrese el autor: ").strip()
                isbn = input("Ingrese el ISBN: ").strip()

                libro = Libro(titulo, autor, isbn)
                self.agregar_libro(libro)

            elif opcion == "3":
                self.mostrar_libros_disponibles()

            elif opcion == "4" and len(self.usuarios) > 0 and len(self.libros) > 0:
                print("\nüìñ Libros disponibles:")
                for i, libro in enumerate(self.libros, 1):
                    print(f"{i}. {libro}")

                try:
                    libro_idx = int(input("Seleccione el n√∫mero del libro a prestar: ")) - 1
                    if 0 <= libro_idx < len(self.libros):
                        usuario_correo = input("Ingrese el correo del usuario: ").strip()
                        usuario = self.buscar_usuario("correo", usuario_correo)
                        if usuario:
                            self.prestar_libro(usuario, self.libros[libro_idx])
                        else:
                            print("‚ùå Usuario no encontrado.")
                    else:
                        print("‚ùå N√∫mero de libro inv√°lido.")
                except ValueError:
                    print("‚ùå Entrada no v√°lida. Ingrese un n√∫mero.")

            elif opcion == "5" and len(self.prestamos) > 0:
                print("\nüìö Libros prestados:")
                for i, prestamo in enumerate(self.prestamos, 1):
                    print(f"{i}. {prestamo.libro} (Prestado a: {prestamo.usuario.nombre})")

                try:
                    prestamo_idx = int(input("Seleccione el n√∫mero del pr√©stamo a devolver: ")) - 1
                    if 0 <= prestamo_idx < len(self.prestamos):
                        prestamo = self.prestamos[prestamo_idx]
                        self.devolver_libro(prestamo.usuario, prestamo.libro)
                    else:
                        print("‚ùå N√∫mero de pr√©stamo inv√°lido.")
                except ValueError:
                    print("‚ùå Entrada no v√°lida. Ingrese un n√∫mero.")

            elif opcion == "6":
                self.mostrar_usuarios()

            elif opcion == "0":
                print("üëã ¬°Gracias por usar la biblioteca!")
                return  # Usar return en lugar de break si estamos en una funci√≥n.

            else:
                print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")